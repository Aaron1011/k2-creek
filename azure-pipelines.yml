trigger:
    branches:
        include:
         - refs/heads/*
         - refs/tags/*
variables:
    CHANNEL: stable
    RUST_BACKTRACE: full
    RUST_TEST_THREADS: 1
pool:
    vmImage: $(VM_IMAGE)
strategy:
    matrix:
        i686-pc-windows-msvc:
            TARGET: i686-pc-windows-msvc
            VM_IMAGE: vs2017-win2016
            ARTIFACT: k2-creek-x32.exe
        x86_64-pc-windows-msvc:
            TARGET: x86_64-pc-windows-gnu
            VM_IMAGE: vs2017-win2016
            ARTIFACT: k2-creek-x64.exe
        x86_64-unknown-linux-gnu:
            TARGET: x86_64-unknown-linux-gnu
            VM_IMAGE: ubuntu-16.04
            RUSTFLAGS: '-C link-dead-code'
            KCOV_TARBALL: v36.tar.gz
            KCOV_DIR: kcov-36
steps:
  - bash: |
      set -x
      curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
    displayName: Install rustup
  - bash: |
      set -x
      rustup toolchain install --no-self-update $CHANNEL-$TARGET
      rustup default $CHANNEL-$TARGET
    displayName: Select toolchain
  - bash: |
      sudo apt-get update
      sudo apt-get install -y --fix-missing pkg-config
      sudo apt-get install -y binutils-dev build-essential cmake libcurl4-openssl-dev libdw-dev libiberty-dev ninja-build python zlib1g-dev
      wget https://github.com/SimonKagstrom/kcov/archive/$KCOV_TARBALL
      tar xzf $KCOV_TARBALL
      cd $KCOV_DIR
      mkdir build
      cd build
      cmake -G 'Ninja' ..
      cmake --build .
      sudo cmake --build . --target install
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Install kcov [Linux]
  - bash: |
      rustup component add rustfmt-preview
      rustup component add clippy-preview
      cargo install cargo-audit
      cargo install cargo-kcov
      cargo install cargo-junit
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Install cargo plugins [Linux]
  - bash: |
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions
  - bash: |
      cargo audit
      cargo fmt --all -- --check
      cargo clippy --all-targets -- -D warnings
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Run cargo audit, fmt and clippy [Linux]
  - bash: |
      cargo build
    displayName: Run cargo build
  - bash: |
      cargo junit --name target/junit.xml
    displayName: Run cargo junit [Linux]
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
  - bash: |
      cargo test --all -- --nocapture
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Run cargo test [Windows]
  - bash: |
      cargo-kcov kcov -v --no-clean-rebuild --all -o target/cov
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Run cargo-kcov [Linux]
  - task: cobertura-transform@0
    inputs:
      cobertura3FilePath: '$(System.DefaultWorkingDirectory)/target/cov/kcov-merged/cobertura.xml'
      cobertura4FilePath: '$(System.DefaultWorkingDirectory)/target/cov/kcov-merged/cobertura4.xml'
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Transform Cobertura Format From 3 to 4 [Linux]'
  - bash: |
      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN)
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Publish coverage to Codecov [Linux]'
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/target/cov/kcov-merged/cobertura4.xml'
      reportDirectory: '$(Build.SourcesDirectory)/target/cov/kcov-merged/'
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Publish code coverage results [Linux]'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: 'junit.xml'
      searchFolder: $(Build.SourcesDirectory)/target/
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Publish unit test results [Linux]'
  - bash: |
      cargo build --release
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Run cargo build [Windows]
  - task: PowerShell@2
    inputs:
      targetType: inline
      workingDirectory: '$(System.DefaultWorkingDirectory)/target/release/'
      script: |
        Rename-Item -Path "k2-creek.exe" -NewName $(ARTIFACT)
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Rename release artifact [Windows]
  - task: PowerShell@2
    inputs:
      targetType: inline
      workingDirectory: '$(System.DefaultWorkingDirectory)/target/release/'
      script: |
        cp $(ARTIFACT) $(Build.ArtifactStagingDirectory)/$(ARTIFACT)
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Prepare release artifact [Windows]
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Publish build artifact [Windows]
  - task: GithubRelease@0
    inputs:
      gitHubConnection: 'creek@ehex'
      repositoryName: 'eHealthExperts/k2-creek'
      tag: $(Build.SourceBranchName)
      action: 'edit'
      assetUploadMode: 'replace'
      isDraft: false
      isPreRelease: false
      addChangeLog: false
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Edit GitHub release [Windows]
